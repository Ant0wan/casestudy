# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
#on:
#  push:
#    branches:
#      - main
#    paths:
#      - '**.go'
#      - '**.mod'
#      - '**.sum'
#      - '**.yaml'
#      - '**.sh'
#      - 'Dockerfile'
#      - '.github/workflows/go.yml'
#    tags:
#      - '*'
#  pull_request:
#    branches:
#      - main

permissions: write-all

env:
  CGO_ENABLED: 0
  GOOS: linux

jobs:
  #  format:
  #    runs-on: ubuntu-latest
  #    steps:
  #    - uses: actions/checkout@v3
  #    - uses: actions/setup-go@v5
  #      with:
  #        go-version: '1.22'
  #    - run: if gofmt -d -l . 2>&1 | read; then gofmt -d -l .; exit 1; fi
  #
  #  lint:
  #    needs: [format]
  #    runs-on: ubuntu-latest
  #    steps:
  #    - uses: actions/checkout@v3
  #    - uses: actions/setup-go@v5
  #    - uses: golangci/golangci-lint-action@v4
  #      with:
  #        version: latest

  #  build:
  #    #needs: [format, lint]
  #    runs-on: ubuntu-latest
  #    strategy:
  #      matrix:
  #        version: ['1.21', '1.22']
  #    steps:
  #    - uses: actions/checkout@v4
  #    - uses: actions/setup-go@v5
  #      with:
  #        go-version: ${{ matrix.version }}
  #    - run: go build -v
  #
  #  test:
  #    #needs: [format, lint, build]
  #    runs-on: ubuntu-latest
  #    steps:
  #    - uses: actions/checkout@v4
  #    - uses: actions/setup-go@v5
  #      with:
  #        go-version: '1.22'
  #    - run: sh test.sh

  #  audit:
  ##    needs: [format, lint, build, test]
  #    runs-on: ubuntu-latest
  #    env:
  #      GO111MODULE: on
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: securego/gosec@master
  #        with:
  #          args: ./...


  docker:
    # needs: [format, lint, build, test, audit]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: localhost:5000/myprogram/myprogram
          #tags: myprogram/myprogram:${TAG}
      - run: |
          docker buildx imagetools inspect localhost:5000/myprogram/myprogram
      - run: docker pull localhost:5000/myprogram/myprogram
      - run: docker tag localhost:5000/myprogram/myprogram myprogram/myprogram
      - run: docker save myprogram/myprogram -o /tmp/myprogram-image.tar
      - run: ls /tmp/myprogram-image.tar



    # upload as artifact or release
    # Minikube CI retreive and deploys  (download artifact + env conf + docker import)



      #  note:
      #    needs: [format, lint, build, test, audit]
      #    if: startsWith(github.ref, 'refs/tags/')
      #    runs-on: ubuntu-latest
      #    env:
      #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    steps:
      #    - uses: actions/checkout@v3
      #    - run: gh release create ${GITHUB_REF#refs/*/} --generate-notes
      #  release:
      #    needs: [format, lint, build, test, audit, note]
      #    if: startsWith(github.ref, 'refs/tags/')
      #    runs-on: ubuntu-latest
      #    env:
      #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    strategy:
      #      matrix:
      #        target: [x86_64-unknown-linux-musl, x86_64-apple-darwin, aarch64-unknown-linux-musl, aarch64-apple-darwin]
      #    steps:
      #    - uses: actions/checkout@v3
      #    - uses: actions/download-artifact@v3
      #      with:
      #        name: tfam_${{ matrix.target }}
      #    - run: mv tfam tfam_${{ matrix.target }}
      #    - run: gh release upload ${GITHUB_REF#refs/*/} tfam_${{ matrix.target }}
