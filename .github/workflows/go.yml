# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
#on:
#  push:
#    branches:
#      - main
#    paths:
#      - '**.go'
#      - '**.mod'
#      - '**.sum'
#      - '**.yaml'
#      - '**.sh'
#      - 'Dockerfile'
#      - '.github/workflows/go.yml'
#    tags:
#      - '*'
#  pull_request:
#    branches:
#      - main

#permissions: write-all

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    - run: if gofmt -d -l . 2>&1 | read; then gofmt -d -l .; exit 1; fi
  lint:
    needs: [format]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v5
    - uses: golangci/golangci-lint-action@v4
      with:
        version: latest

      #  build:
      #    runs-on: ubuntu-latest
      #    steps:
      #    - uses: actions/checkout@v3
      #
      #    - name: Set up Go
      #      uses: actions/setup-go@v4
      #      with:
      #        go-version: '1.20'
      #
      #    - name: Build
      #      run: go build -v ./...
      #
      #    - name: Test
      #      run: go test -v ./...

      #  lint:
      #    needs: [format]
      #    runs-on: ubuntu-latest
      #    steps:
      #    - uses: actions/checkout@v3
      #    - uses: actions/setup-go@v5
      #    - uses: golangci/golangci-lint-action@v4
      #      with:
      #        version: latest
      #  build:
      #    needs: [format, lint]
      #    runs-on: ${{ matrix.os }}
      #    strategy:
      #      matrix:
      #        include:
      #          - target: x86_64-unknown-linux-musl
      #            os: ubuntu-latest
      #            env:
      #              CC: gcc
      #              RUSTFLAGS: '-D warnings'
      #          - target: x86_64-apple-darwin
      #            os: macos-latest
      #            env:
      #              CC: clang
      #              RUSTFLAGS: '-D warnings'
      #          - target: aarch64-unknown-linux-musl
      #            os: ubuntu-latest
      #            env:
      #              AR: llvm-ar
      #              CC: clang
      #              RUSTFLAGS: '-D warnings -Clink-self-contained=yes -Clinker=rust-lld'
      #          - target: aarch64-apple-darwin
      #            os: macos-latest
      #            env:
      #              CC: clang
      #              RUSTFLAGS: '-D warnings'
      #    env:
      #      CARGO_TARGET_DIR: ${{ github.workspace }}
      #    steps:
      #    - uses: actions/checkout@v3
      #    - run: rustup target add ${{ matrix.target }}
      #    - if: "!startsWith(github.ref, 'refs/tags/')"
      #      run: cargo build --verbose --target=${{ matrix.target }}
      #      env: ${{ matrix.env }}
      #    - if: startsWith(github.ref, 'refs/tags/')
      #      run: cargo build --release --target=${{ matrix.target }}
      #      env: ${{ matrix.env }}
      #    - if: startsWith(github.ref, 'refs/tags/')
      #      uses: actions/upload-artifact@v3
      #      with:
      #        name: tfam_${{ matrix.target }}
      #        path: ${{ matrix.target }}/release/tfam
      #  test:
      #    needs: [format, lint, build]
      #    runs-on: ${{ matrix.os }}
      #    strategy:
      #      matrix:
      #        include:
      #          - target: x86_64-unknown-linux-musl
      #            os: ubuntu-latest
      #            env:
      #              CC: gcc
      #              RUSTFLAGS: '-D warnings'
      #          - target: x86_64-apple-darwin
      #            os: macos-latest
      #            env:
      #              CC: clang
      #              RUSTFLAGS: '-D warnings'
      #    steps:
      #    - uses: actions/checkout@v3
      #    - run: rustup target add ${{ matrix.target }}
      #    - run: cargo test --verbose --all --target=${{ matrix.target }}
      #      env: ${{ matrix.env }}
      #  audit:
      #    needs: [format, lint, build, test]
      #    runs-on: ubuntu-latest
      #    steps:
      #    - uses: actions/checkout@v3
      #    - run: cargo install cargo-audit
      #    - run: cargo audit
      #  note:
      #    needs: [format, lint, build, test, audit]
      #    if: startsWith(github.ref, 'refs/tags/')
      #    runs-on: ubuntu-latest
      #    env:
      #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    steps:
      #    - uses: actions/checkout@v3
      #    - run: gh release create ${GITHUB_REF#refs/*/} --generate-notes
      #  release:
      #    needs: [format, lint, build, test, audit, note]
      #    if: startsWith(github.ref, 'refs/tags/')
      #    runs-on: ubuntu-latest
      #    env:
      #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    strategy:
      #      matrix:
      #        target: [x86_64-unknown-linux-musl, x86_64-apple-darwin, aarch64-unknown-linux-musl, aarch64-apple-darwin]
      #    steps:
      #    - uses: actions/checkout@v3
      #    - uses: actions/download-artifact@v3
      #      with:
      #        name: tfam_${{ matrix.target }}
      #    - run: mv tfam tfam_${{ matrix.target }}
      #    - run: gh release upload ${GITHUB_REF#refs/*/} tfam_${{ matrix.target }}
      #
      #
