name: Go

on:
  push:
    branches:
      - main
    paths:
      - '**.go'
      - '**.mod'
      - '**.sum'
      - '**.yaml'
      - '**.sh'
      - 'Dockerfile'
      - '.github/workflows/go.yml'
    tags:
      - '*'
  pull_request:
    branches:
      - main

env:
  CGO_ENABLED: 0
  GOOS: linux

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    - run: if gofmt -d -l . 2>&1 | read; then gofmt -d -l .; exit 1; fi

  lint:
    needs: [format]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['1.21', '1.22']
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.version }}
        cache: false
    - uses: golangci/golangci-lint-action@v4
      with:
        version: latest

  build:
    needs: [format, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['1.21', '1.22']
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.version }}
    - run: go build -v

  test:
    needs: [format, lint, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    - run: sh test.sh

  audit:
    needs: [format, lint, build]
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - uses: actions/checkout@v4
      - uses: securego/gosec@master
        with:
          args: ./...

  docker:
    needs: [format, lint, build, test, audit]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - uses: docker/build-push-action@v5
        with:
          push: true
          tags: localhost:5000/myprogram/myprogram     #tags: myprogram/myprogram:${{ github.sha }}
      - run: docker buildx imagetools inspect localhost:5000/myprogram/myprogram
      - run: docker pull localhost:5000/myprogram/myprogram
      - run: docker tag localhost:5000/myprogram/myprogram myprogram/myprogram
      - run: docker save myprogram/myprogram -o /tmp/myprogram-image.tar
      - uses: actions/upload-artifact@v3
        with:
          name: myprogram-image.tar
          path: /tmp/myprogram-image.tar

  scan:
    needs: [format, lint, build, test, audit, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: myprogram-image.tar
      - run: docker load -i myprogram-image.tar
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'myprogram/myprogram'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  minikube:
    needs: [format, lint, build, test, audit, docker, scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: medyagh/setup-minikube@master
      - uses: actions/download-artifact@v3
        with:
          name: myprogram-image.tar
      - run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
          docker load -i myprogram-image.tar
      - run: kubectl create -f myprogram-manifest.yaml --dry-run=server
      - run: kubectl create -f myprogram-manifest.yaml
      - run: kubectl logs -l job-name=myprogram
